---
export interface Props {
  standort: string;
  tisch: string;
}

const { standort, tisch } = Astro.props;
---

<div id="queueViewer" data-standort={standort} data-tisch={tisch}>
  <!-- Aktuelle Warteschlange -->
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 mb-6">
    <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">
      Aktuelle Warteschlange
    </h2>
    
    <div id="queueList" class="space-y-3">
      <!-- Wird dynamisch gefüllt -->
      <div class="text-center py-8 text-gray-500 dark:text-gray-400">
        <svg class="animate-spin h-8 w-8 mx-auto mb-4 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Lade Warteschlange...
      </div>
    </div>
  </div>

  <!-- Aktuelles Spiel -->
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 mb-6">
    <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">
      Aktuelles Spiel
    </h2>
    
    <div id="currentGame" class="space-y-4">
      <!-- Wird dynamisch gefüllt -->
      <div class="text-center py-8 text-gray-500 dark:text-gray-400">
        <p>Kein aktives Spiel</p>
      </div>
    </div>
  </div>

  <!-- Team eintragen -->
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
    <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">
      In die Warteschlange eintragen
    </h2>
    
    <form id="addTeamForm" class="space-y-4">
      <div class="flex gap-3">
        <input
          type="text"
          id="teamName"
          placeholder="Dein Team-Name..."
          class="flex-1 px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-lg"
          required
        />
        <button
          type="submit"
          class="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-6 py-3 rounded-lg transition duration-200 flex items-center gap-2"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          Eintragen
        </button>
      </div>
    </form>

    <!-- Quick-Add für wiederkehrende Teams -->
    <div id="quickAddSection" class="mt-6">
      <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
        Schnellauswahl
      </h3>
      <div id="recentTeams" class="grid grid-cols-2 sm:grid-cols-4 gap-2">
        <!-- Wird dynamisch gefüllt -->
      </div>
    </div>
  </div>

  <!-- Status-Anzeige -->
  <div class="mt-6 text-center">
    <div id="statusMessage" class="inline-flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
      <svg class="w-4 h-4 text-green-500 animate-pulse" fill="currentColor" viewBox="0 0 20 20">
        <circle cx="10" cy="10" r="5"></circle>
      </svg>
      <span>Live-Updates aktiviert</span>
    </div>
  </div>
</div>

<script>
  import { 
    getOrCreateQueue, 
    addTeamToQueue, 
    subscribeToQueue
  } from '../lib/queueService';
  import type { QueueData } from '../types';

  // Element-Referenzen
  const viewerEl = document.getElementById('queueViewer') as HTMLElement;
  const standort = viewerEl.dataset.standort!;
  const tisch = viewerEl.dataset.tisch!;
  
  const addTeamForm = document.getElementById('addTeamForm') as HTMLFormElement;
  const teamNameInput = document.getElementById('teamName') as HTMLInputElement;
  const queueListEl = document.getElementById('queueList') as HTMLElement;
  const recentTeamsEl = document.getElementById('recentTeams') as HTMLElement;
  const currentGameEl = document.getElementById('currentGame') as HTMLElement;
  const statusMessage = document.getElementById('statusMessage') as HTMLElement;

  let currentQueue: QueueData | null = null;
  let unsubscribe: (() => void) | null = null;

  // UI aktualisieren
  const updateUI = () => {
    if (!currentQueue) return;
    
    // Recent Teams
    if (currentQueue.recentTeams && currentQueue.recentTeams.length > 0) {
      recentTeamsEl.innerHTML = currentQueue.recentTeams.map(team => `
        <button
          class="quick-add-btn bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 px-3 py-2 rounded-lg font-medium transition text-sm"
          data-team="${team}"
        >
          ${team}
        </button>
      `).join('');
      
      // Event Listener für Quick-Add Buttons
      document.querySelectorAll('.quick-add-btn').forEach(btn => {
        btn.addEventListener('click', async (e) => {
          const team = (e.target as HTMLElement).dataset.team!;
          await handleAddTeam(team);
        });
      });
    } else {
      recentTeamsEl.innerHTML = `
        <p class="text-sm text-gray-500 dark:text-gray-400 col-span-4">
          Noch keine Teams vorhanden
        </p>
      `;
    }
    
    // Queue Liste
    if (currentQueue.currentQueue && currentQueue.currentQueue.length > 0) {
      queueListEl.innerHTML = currentQueue.currentQueue.map((team, index) => {
        const isPlaying = index < 2;
        const position = index + 1;
        const waitingTeams = Math.max(0, index - 1);
        
        return `
          <div class="flex items-center justify-between p-4 rounded-lg ${
            isPlaying 
              ? 'bg-green-100 dark:bg-green-900 border-2 border-green-500' 
              : 'bg-gray-100 dark:bg-gray-700'
          }">
            <div class="flex items-center gap-3">
              <span class="text-2xl font-bold ${
                isPlaying 
                  ? 'text-green-700 dark:text-green-300' 
                  : 'text-gray-600 dark:text-gray-400'
              }">
                ${position}
              </span>
              <div>
                <span class="text-lg font-medium text-gray-900 dark:text-white">
                  ${team}
                </span>
                ${isPlaying ? `
                  <span class="ml-2 bg-green-500 text-white text-xs px-2 py-1 rounded-full">
                    SPIELT JETZT
                  </span>
                ` : waitingTeams > 0 ? `
                  <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">
                    ${waitingTeams === 1 ? '1 Team vor dir' : `${waitingTeams} Teams vor dir`}
                  </p>
                ` : index === 2 ? `
                  <p class="text-sm text-orange-600 dark:text-orange-400 mt-1 font-medium">
                    Als nächstes dran!
                  </p>
                ` : ''}
              </div>
            </div>
            ${!isPlaying && index > 1 ? `
              <div class="text-right">
                <span class="text-sm text-gray-500 dark:text-gray-400">
                  ~${(waitingTeams + 1) * 10} Min.
                </span>
              </div>
            ` : ''}
          </div>
        `;
      }).join('');
    } else {
      queueListEl.innerHTML = `
        <div class="text-center py-8 text-gray-500 dark:text-gray-400">
          <svg class="w-16 h-16 mx-auto mb-4 text-gray-300 dark:text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path>
          </svg>
          <p class="text-lg">Warteschlange ist leer</p>
          <p class="text-sm mt-2">Sei der Erste und trage dich ein!</p>
        </div>
      `;
    }
    
    // Aktuelles Spiel
    if (currentQueue.currentQueue && currentQueue.currentQueue.length >= 2) {
      const team1 = currentQueue.currentQueue[0];
      const team2 = currentQueue.currentQueue[1];
      const nextTeam = currentQueue.currentQueue[2];
      
      currentGameEl.innerHTML = `
        <div class="grid grid-cols-2 gap-4">
          <div class="text-center p-6 bg-blue-100 dark:bg-blue-900 rounded-lg">
            <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">Team 1</p>
            <p class="text-2xl font-bold text-gray-900 dark:text-white">${team1}</p>
          </div>
          <div class="text-center p-6 bg-red-100 dark:bg-red-900 rounded-lg">
            <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">Team 2</p>
            <p class="text-2xl font-bold text-gray-900 dark:text-white">${team2}</p>
          </div>
        </div>
        
        ${nextTeam ? `
          <div class="mt-4 p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg text-center">
            <p class="text-sm text-gray-600 dark:text-gray-400">Als nächstes:</p>
            <p class="text-lg font-semibold text-gray-900 dark:text-white">${nextTeam}</p>
          </div>
        ` : ''}
      `;
    } else {
      currentGameEl.innerHTML = `
        <div class="text-center py-8 text-gray-500 dark:text-gray-400">
          <svg class="w-16 h-16 mx-auto mb-4 text-gray-300 dark:text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <p>Kein aktives Spiel</p>
          <p class="text-sm mt-2">Warte auf mehr Spieler</p>
        </div>
      `;
    }
  };

  // Team hinzufügen
  const handleAddTeam = async (teamName: string) => {
    if (!teamName.trim()) return;
    
    // Prüfen ob Team bereits in der Queue ist
    if (currentQueue?.currentQueue.includes(teamName)) {
      alert('Dieses Team ist bereits in der Warteschlange!');
      return;
    }
    
    try {
      await addTeamToQueue(standort, tisch, teamName);
      teamNameInput.value = '';
      
      // Erfolgsmeldung
      statusMessage.innerHTML = `
        <svg class="w-4 h-4 text-green-500" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
        </svg>
        <span>Team erfolgreich eingetragen!</span>
      `;
      
      setTimeout(() => {
        statusMessage.innerHTML = `
          <svg class="w-4 h-4 text-green-500 animate-pulse" fill="currentColor" viewBox="0 0 20 20">
            <circle cx="10" cy="10" r="5"></circle>
          </svg>
          <span>Live-Updates aktiviert</span>
        `;
      }, 3000);
    } catch (error) {
      console.error('Fehler beim Hinzufügen:', error);
      // Lokales Update als Fallback
      if (currentQueue) {
        if (!currentQueue.currentQueue) currentQueue.currentQueue = [];
        currentQueue.currentQueue.push(teamName);
        if (!currentQueue.recentTeams) currentQueue.recentTeams = [];
        if (!currentQueue.recentTeams.includes(teamName)) {
          currentQueue.recentTeams = [teamName, ...currentQueue.recentTeams].slice(0, 8);
        }
        updateUI();
      }
    }
  };

  // Queue initialisieren
  const initQueue = async () => {
    try {
      // Queue erstellen/abrufen
      currentQueue = await getOrCreateQueue(standort, tisch);
      
      // Real-time Updates abonnieren
      if (unsubscribe) unsubscribe();
      unsubscribe = subscribeToQueue(standort, tisch, (queue) => {
        if (queue) {
          currentQueue = queue;
          updateUI();
        }
      });
      
      updateUI();
    } catch (error) {
      console.error('Fehler beim Initialisieren der Queue:', error);
      // Fallback zu lokaler Simulation
      currentQueue = {
        currentQueue: [],
        recentTeams: [],
        lastActivity: new Date(),
        standort,
        tisch
      };
      updateUI();
      
      // Status Update
      statusMessage.innerHTML = `
        <svg class="w-4 h-4 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
        </svg>
        <span>Offline-Modus (lokale Demo)</span>
      `;
    }
  };

  // Event Listeners
  addTeamForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    await handleAddTeam(teamNameInput.value);
  });

  // Initialisierung
  initQueue();

  // Cleanup
  window.addEventListener('beforeunload', () => {
    if (unsubscribe) unsubscribe();
  });

  // Auto-Refresh alle 30 Sekunden als Fallback
  setInterval(() => {
    if (!unsubscribe) {
      initQueue();
    }
  }, 30000);
</script>