---
export interface Props {
  standort: string;
  tisch: string;
}

const { standort, tisch } = Astro.props;
---

<div id="queueViewer" data-standort={standort} data-tisch={tisch} class="min-h-screen bg-gray-50 dark:bg-gray-900">

  <!-- Aktuelle Warteschlange -->
  <div class="max-w-7xl mx-auto px-8 mb-6">
    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl p-6">
      <div class="text-center mb-8">
        <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-2">üèì Kickern.in</h1>
        <h2 class="text-3xl font-bold text-gray-900 dark:text-white">
          Warteschlange
        </h2>
      </div>
    
      <div id="queueList" class="space-y-6">
        <!-- Wird dynamisch gef√ºllt -->
        <div class="text-center py-16 text-gray-500 dark:text-gray-400">
          <svg class="animate-spin h-16 w-16 mx-auto mb-8 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <p class="text-3xl">Lade Warteschlange...</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Aktuelles Spiel -->
  <div class="max-w-7xl mx-auto px-8 mb-6">
    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl p-6">
      <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-6 text-center">
        üéØ Aktuelles Spiel
      </h2>
      
      <div id="currentGame" class="space-y-8">
        <!-- Wird dynamisch gef√ºllt -->
        <div class="text-center py-16 text-gray-500 dark:text-gray-400">
          <p class="text-3xl">Kein aktives Spiel</p>
        </div>
      </div>
    </div>
  </div>


  <!-- Status-Anzeige -->
  <div class="mt-12 mb-8 text-center">
    <div id="statusMessage" class="inline-flex items-center gap-3 text-xl text-gray-600 dark:text-gray-400 bg-white dark:bg-gray-800 px-6 py-3 rounded-full shadow-lg">
      <svg class="w-6 h-6 text-green-500 animate-pulse" fill="currentColor" viewBox="0 0 20 20">
        <circle cx="10" cy="10" r="5"></circle>
      </svg>
      <span>Live-Updates aktiviert</span>
    </div>
  </div>
</div>

<script>
  import { 
    getOrCreateQueue, 
    addTeamToQueue, 
    subscribeToQueue
  } from '../lib/queueService';
  import type { QueueData } from '../types';

  // Robuste Manager-Modus Erkennung
  const urlParams = new URLSearchParams(window.location.search);
  const isManageMode = urlParams.has('manage') || urlParams.get('manage') === 'true';
  
  console.log('Viewer: URL:', window.location.href);
  console.log('Viewer: Search params:', window.location.search);
  console.log('Viewer: Is manage mode:', isManageMode);

  if (!isManageMode) {
    console.log('‚úÖ Viewer: Initialisiere Viewer-Modus');
  } else {
    console.log('üö´ Viewer: Manager-Modus erkannt, Viewer wird NICHT initialisiert');
  }

  if (!isManageMode) {
    // Element-Referenzen und Slug-Fallback
    const viewerEl = document.getElementById('queueViewer') as HTMLElement;
    const segments = window.location.pathname.replace(/^\/+|\/+$/g, '').split('/');
    const fallbackStandort = decodeURIComponent(segments[0] || '');
    const fallbackTisch = decodeURIComponent(segments[1] || '');
    const standort = (viewerEl.dataset.standort || fallbackStandort) as string;
    const tisch = (viewerEl.dataset.tisch || fallbackTisch) as string;
    
    const queueListEl = document.getElementById('queueList') as HTMLElement;
    const currentGameEl = document.getElementById('currentGame') as HTMLElement;
    const statusMessage = document.getElementById('statusMessage') as HTMLElement;
  
    let currentQueue: QueueData | null = null;
    let unsubscribe: (() => void) | null = null;
  
    // UI aktualisieren
    const updateUI = () => {
      if (!currentQueue) return;
      
      
      // Queue Liste
      if (currentQueue.currentQueue && currentQueue.currentQueue.length > 0) {
        queueListEl.innerHTML = currentQueue.currentQueue.map((team, index) => {
          const isPlaying = index < 2;
          const position = index + 1;
          const waitingTeams = Math.max(0, index - 1);
          
          return `
            <div class="flex items-center justify-between p-6 rounded-2xl ${
              isPlaying 
                ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white border-4 border-green-400' 
                : 'bg-gray-100 dark:bg-gray-700'
            } shadow-lg">
              <div class="flex items-center gap-6">
                <span class="text-6xl font-bold ${
                  isPlaying 
                    ? 'text-white' 
                    : 'text-gray-600 dark:text-gray-400'
                }">
                  ${position}
                </span>
                <div>
                  <span class="text-3xl font-bold ${
                    isPlaying ? 'text-white' : 'text-gray-900 dark:text-white'
                  }">
                    ${team}
                  </span>
                  ${isPlaying ? `
                    <div class="mt-2">
                      <span class="bg-white/20 text-white text-lg px-4 py-2 rounded-full font-bold backdrop-blur-sm">
                        üéÆ SPIELT JETZT
                      </span>
                    </div>
                  ` : waitingTeams > 0 ? `
                    <p class="text-lg text-gray-500 dark:text-gray-400 mt-2">
                      ${waitingTeams === 1 ? '1 Team vor dir' : `${waitingTeams} Teams vor dir`}
                    </p>
                  ` : index === 2 ? `
                    <p class="text-lg text-orange-600 dark:text-orange-400 mt-2 font-bold">
                      ‚è≠Ô∏è Als n√§chstes dran!
                    </p>
                  ` : ''}
                </div>
              </div>
              ${!isPlaying && index > 1 ? `
                <div class="text-right">
                  <span class="text-xl text-gray-500 dark:text-gray-400 font-semibold">
                    ~${waitingTeams * 10} Min.
                  </span>
                </div>
              ` : ''}
            </div>
          `;
        }).join('');
      } else {
        queueListEl.innerHTML = `
          <div class="text-center py-16 text-gray-500 dark:text-gray-400">
            <svg class="w-32 h-32 mx-auto mb-8 text-gray-300 dark:text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path>
            </svg>
            <p class="text-4xl font-bold">Warteschlange ist leer</p>
            <p class="text-2xl mt-4">Sei der Erste und trage dich ein!</p>
          </div>
        `;
      }
      
      // Aktuelles Spiel
      if (currentQueue.currentQueue && currentQueue.currentQueue.length >= 2) {
        const team1 = currentQueue.currentQueue[0];
        const team2 = currentQueue.currentQueue[1];
        const nextTeam = currentQueue.currentQueue[2];
        
        currentGameEl.innerHTML = `
          <div class="grid grid-cols-2 gap-8">
            <div class="text-center p-8 bg-gradient-to-br from-blue-500 to-blue-600 text-white rounded-2xl shadow-2xl">
              <p class="text-2xl text-blue-100 mb-4">Team 1</p>
              <p class="text-5xl font-bold">${team1}</p>
            </div>
            <div class="text-center p-8 bg-gradient-to-br from-red-500 to-red-600 text-white rounded-2xl shadow-2xl">
              <p class="text-2xl text-red-100 mb-4">Team 2</p>
              <p class="text-5xl font-bold">${team2}</p>
            </div>
          </div>
          
          <div class="text-center text-6xl my-8">
            ‚ö° VS ‚ö°
          </div>
          
          ${nextTeam ? `
            <div class="mt-8 p-6 bg-gradient-to-r from-yellow-400 to-orange-400 text-white rounded-2xl text-center shadow-xl">
              <p class="text-2xl text-yellow-100">Als n√§chstes:</p>
              <p class="text-4xl font-bold mt-2">üèÜ ${nextTeam}</p>
            </div>
          ` : ''}
        `;
      } else {
        currentGameEl.innerHTML = `
          <div class="text-center py-16 text-gray-500 dark:text-gray-400">
            <svg class="w-32 h-32 mx-auto mb-8 text-gray-300 dark:text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <p class="text-4xl font-bold">Kein aktives Spiel</p>
            <p class="text-2xl mt-4">Warte auf mehr Spieler</p>
          </div>
        `;
      }
    };
  
    // Queue initialisieren
    const initQueue = async () => {
      try {
        // Queue erstellen/abrufen
        currentQueue = await getOrCreateQueue(standort, tisch);
        
        // Real-time Updates abonnieren
        if (unsubscribe) unsubscribe();
        unsubscribe = subscribeToQueue(standort, tisch, (queue) => {
          if (queue) {
            currentQueue = queue;
            updateUI();
          }
        });
        
        updateUI();
      } catch (error) {
        console.error('Fehler beim Initialisieren der Queue:', error);
        // Fallback zu lokaler Simulation
        currentQueue = {
          currentQueue: [],
          recentTeams: [],
          lastActivity: new Date(),
          standort,
          tisch
        };
        updateUI();
        
        // Status Update
        statusMessage.innerHTML = `
          <svg class="w-4 h-4 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
          </svg>
          <span>Offline-Modus (lokale Demo)</span>
        `;
      }
    };
  
    // Initialisierung
    initQueue();
  
    // Cleanup
    window.addEventListener('beforeunload', () => {
      if (unsubscribe) unsubscribe();
    });
  
    // Auto-Refresh alle 30 Sekunden als Fallback
    setInterval(() => {
      if (!unsubscribe) {
        initQueue();
      }
    }, 30000);
  }
</script>