---
export interface Props {
  standort: string;
  tisch: string;
}

const { standort, tisch } = Astro.props;
---

<div id="queueManager" data-standort={standort} data-tisch={tisch} class="min-h-screen bg-gray-50 dark:bg-gray-900 p-4 md:p-6">
  

  <!-- Team hinzufÃ¼gen -->
  <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-6 mb-6">
    <h2 class="text-2xl md:text-3xl font-bold text-gray-900 dark:text-white mb-6 text-center">
      âž• Team hinzufÃ¼gen
    </h2>
    
    <form id="addTeamForm" class="space-y-6">
      <div class="flex flex-col md:flex-row gap-4">
        <input
          type="text"
          id="teamName"
          placeholder="Team-Name eingeben..."
          class="flex-1 px-6 py-4 rounded-xl border-2 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-4 focus:ring-blue-500 focus:border-blue-500 text-xl md:text-2xl font-medium"
          required
        />
        <button
          type="submit"
          class="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-bold px-8 py-4 rounded-xl transition duration-200 flex items-center justify-center gap-3 text-xl md:text-2xl shadow-lg min-h-[60px] md:min-h-[70px]"
        >
          <svg class="w-6 h-6 md:w-8 md:h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          HinzufÃ¼gen
        </button>
      </div>
    </form>

    <!-- Quick-Add Buttons -->
    <div id="quickAddSection" class="mt-8">
      <h3 class="text-lg md:text-xl font-semibold text-gray-700 dark:text-gray-300 mb-4 text-center">
        ðŸš€ Schnellauswahl
      </h3>
      <div id="recentTeams" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
        <!-- Wird dynamisch gefÃ¼llt -->
      </div>
    </div>
  </div>

  <!-- Aktuelle Warteschlange -->
  <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-6 mb-6">
    <div class="flex flex-col md:flex-row items-center justify-between mb-6 gap-4">
      <h2 class="text-2xl md:text-3xl font-bold text-gray-900 dark:text-white text-center md:text-left">
        ðŸ“‹ Warteschlange
      </h2>
      <button
        id="clearQueueBtn"
        class="bg-red-500 hover:bg-red-600 text-white font-bold px-6 py-3 rounded-xl transition duration-200 flex items-center gap-2 text-lg shadow-lg"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
        </svg>
        Alle entfernen
      </button>
    </div>

    <div id="queueList" class="space-y-4">
      <!-- Wird dynamisch gefÃ¼llt -->
      <div class="text-center py-12 text-gray-500 dark:text-gray-400">
        <p class="text-xl md:text-2xl">Warteschlange ist leer</p>
        <p class="text-lg mt-2">FÃ¼ge Teams hinzu, um zu starten</p>
      </div>
    </div>
  </div>

</div>


<script>
  import { 
    getOrCreateQueue, 
    addTeamToQueue, 
    removeTeamFromQueue,
    clearQueue,
    subscribeToQueue
  } from '../lib/queueService';
  import type { QueueData } from '../types';

  // Robuste Manager-Modus Erkennung
  const urlParams = new URLSearchParams(window.location.search);
  const isManageMode = urlParams.has('manage') || urlParams.get('manage') === 'true';

  if (isManageMode) {
    // Element-Referenzen und Slug-Fallback
    const managerEl = document.getElementById('queueManager') as HTMLElement;
    const segments = window.location.pathname.replace(/^\/+|\/+$/g, '').split('/');
    const fallbackStandort = decodeURIComponent(segments[0] || '');
    const fallbackTisch = decodeURIComponent(segments[1] || '');
    const standort = (managerEl.dataset.standort || fallbackStandort) as string;
    const tisch = (managerEl.dataset.tisch || fallbackTisch) as string;
    
    const addTeamForm = managerEl.querySelector('#addTeamForm') as HTMLFormElement;
    const teamNameInput = managerEl.querySelector('#teamName') as HTMLInputElement;
    // Sicherstellen, dass wir das richtige queueList Element im Manager finden
    const queueListEl = managerEl.querySelector('#queueList') as HTMLElement;
    const recentTeamsEl = managerEl.querySelector('#recentTeams') as HTMLElement;
    const clearQueueBtn = managerEl.querySelector('#clearQueueBtn') as HTMLButtonElement;

    let currentQueue: QueueData | null = null;
    let unsubscribe: (() => void) | null = null;

    // Queue initialisieren
    const initQueue = async () => {
      try {
        // Queue erstellen/abrufen
        currentQueue = await getOrCreateQueue(standort, tisch);
        
        // Real-time Updates abonnieren
        if (unsubscribe) unsubscribe();
        unsubscribe = subscribeToQueue(standort, tisch, (queue) => {
          if (queue) {
            currentQueue = queue;
            updateUI();
          }
        });
        
        updateUI();
      } catch (error) {
        console.error('Fehler beim Initialisieren der Queue:', error);
        // Fallback zu lokaler Simulation
        currentQueue = {
          currentQueue: [],
          recentTeams: [],
          lastActivity: new Date(),
          standort,
          tisch
        };
        updateUI();
      }
    };

    // UI aktualisieren
    const updateUI = () => {
      if (!currentQueue) return;
      
      // Recent Teams
      if (currentQueue.recentTeams.length > 0) {
        recentTeamsEl.innerHTML = currentQueue.recentTeams.map(team => `
          <button
            class="quick-add-btn bg-gradient-to-r from-gray-100 to-gray-200 hover:from-gray-200 hover:to-gray-300 dark:from-gray-700 dark:to-gray-600 dark:hover:from-gray-600 dark:hover:to-gray-500 text-gray-800 dark:text-gray-200 px-6 py-4 rounded-xl font-semibold transition text-lg md:text-xl shadow-lg min-h-[60px] flex items-center justify-center"
            data-team="${team}"
          >
            ${team}
          </button>
        `).join('');
        
        // Event Listener fÃ¼r Quick-Add Buttons
        document.querySelectorAll('.quick-add-btn').forEach(btn => {
          btn.addEventListener('click', async (e) => {
            const team = (e.target as HTMLElement).dataset.team!;
            await handleAddTeam(team);
          });
        });
      }
      
      // Queue Liste
      if (currentQueue.currentQueue.length > 0) {
        const htmlContent = currentQueue.currentQueue.map((team, index) => {
          const isPlaying = index < 2;
          return `
            <div class="flex items-center justify-between p-6 rounded-2xl ${
              isPlaying 
                ? 'bg-gradient-to-r from-green-400 to-emerald-500 text-white border-2 border-green-400 shadow-lg' 
                : 'bg-gray-100 dark:bg-gray-700 shadow-md'
            }">
              <div class="flex items-center gap-4">
                <span class="text-3xl md:text-4xl font-bold ${
                  isPlaying 
                    ? 'text-white' 
                    : 'text-gray-600 dark:text-gray-400'
                }">
                  ${index + 1}
                </span>
                <div>
                  <span class="text-xl md:text-2xl font-bold ${
                    isPlaying ? 'text-white' : 'text-gray-900 dark:text-white'
                  }">
                    ${team}
                  </span>
                  ${isPlaying ? `
                    <div class="mt-1">
                      <span class="bg-white/20 text-white text-sm px-3 py-1 rounded-full font-semibold backdrop-blur-sm">
                        ðŸŽ® SPIELT
                      </span>
                    </div>
                  ` : ''}
                </div>
              </div>
              <button
                class="remove-team-btn bg-red-500 hover:bg-red-600 text-white p-3 rounded-xl transition duration-200 shadow-lg"
                data-team="${team}"
              >
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          `;
        }).join('');
        
        // HTML ins DOM einfÃ¼gen
        queueListEl.innerHTML = htmlContent;
        
        // Event Listener fÃ¼r Remove Buttons
        document.querySelectorAll('.remove-team-btn').forEach(btn => {
          btn.addEventListener('click', async (e) => {
            const team = (e.currentTarget as HTMLElement).dataset.team!;
            await handleRemoveTeam(team);
          });
        });
      } else {
        console.log('ðŸ“­ Manager: Queue ist leer, zeige Platzhalter');
        queueListEl.innerHTML = `
          <div class="text-center py-12 text-gray-500 dark:text-gray-400">
            <p class="text-xl md:text-2xl">Warteschlange ist leer</p>
            <p class="text-lg mt-2">FÃ¼ge Teams hinzu, um zu starten</p>
          </div>
        `;
      }
    };

    // Team hinzufÃ¼gen
    const handleAddTeam = async (teamName: string) => {
      if (!teamName.trim()) return;
      
      try {
        await addTeamToQueue(standort, tisch, teamName);
        teamNameInput.value = '';
      } catch (error) {
        console.error('Fehler beim HinzufÃ¼gen:', error);
        // Lokales Update als Fallback
        if (currentQueue) {
          currentQueue.currentQueue.push(teamName);
          if (!currentQueue.recentTeams.includes(teamName)) {
            currentQueue.recentTeams = [teamName, ...currentQueue.recentTeams].slice(0, 8);
          }
          updateUI();
        }
      }
    };

    // Team entfernen
    const handleRemoveTeam = async (teamName: string) => {
      try {
        await removeTeamFromQueue(standort, tisch, teamName);
      } catch (error) {
        console.error('Fehler beim Entfernen:', error);
        // Lokales Update als Fallback
        if (currentQueue) {
          currentQueue.currentQueue = currentQueue.currentQueue.filter(t => t !== teamName);
          updateUI();
        }
      }
    };


    // Event Listeners
    addTeamForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      await handleAddTeam(teamNameInput.value);
    });

    clearQueueBtn.addEventListener('click', async () => {
      if (confirm('Wirklich alle Teams aus der Warteschlange entfernen?')) {
        try {
          await clearQueue(standort, tisch);
        } catch (error) {
          console.error('Fehler beim Leeren:', error);
          // Lokales Update als Fallback
          if (currentQueue) {
            currentQueue.currentQueue = [];
            updateUI();
          }
        }
      }
    });

    // Initialisierung
    
    initQueue();

    // Cleanup
    window.addEventListener('beforeunload', () => {
      if (unsubscribe) unsubscribe();
    });
  }
</script>